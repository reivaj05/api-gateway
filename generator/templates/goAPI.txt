package {{ .ServiceName }}

import (
	"fmt"

	gen "github.com/reivaj05/apigateway/api/{{ .ServiceName }}/generated"
	{{ .ServiceName }}Service "github.com/reivaj05/apigateway/services/{{ .ServiceName }}"

	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"
	"golang.org/x/net/context"
)


type serviceImpl struct{}

// Get returns an object based on its id
func (service *serviceImpl) Get(
	ctx context.Context, request *gen.GetRequest) (*gen.GetResponse, error) {

	response, err := {{ .ServiceName }}Service.Get(formatGetData(request))
	fmt.Println("TODO: Handle response on your way", response, err)
	return &gen.GetResponse{
	}, err
}

func formatGetData(request *gen.GetRequest) map[string]interface{}{

	// TODO: Format your own data
	return map[string]interface{}{

	}
}

// List returns a list of objects
func (service *serviceImpl) List(
	ctx context.Context, request *gen.ListRequest) (*gen.ListResponse, error) {

	response, err := {{ .ServiceName }}Service.List(formatListData(request))
	fmt.Println("TODO: Handle response on your way", response, err)
	return &gen.ListResponse{
	}, err
}

func formatListData(request *gen.ListRequest) map[string]interface{}{

	// TODO: Format your own data
	return map[string]interface{}{

	}
}

// Create creates a new object
func (service *serviceImpl) Create(
	ctx context.Context, request *gen.CreateRequest) (*gen.CreateResponse, error) {

	response, err := {{ .ServiceName }}Service.Create(formatCreateData(request))
	fmt.Println("TODO: Handle response on your way", response, err)
	return &gen.CreateResponse{
	}, err
}

func formatCreateData(request *gen.CreateRequest) map[string]interface{}{

	// TODO: Format your own data
	return map[string]interface{}{

	}
}

// Update updates an existing object
func (service *serviceImpl) Update(
	ctx context.Context, request *gen.UpdateRequest) (*gen.UpdateResponse, error) {

	response, err := {{ .ServiceName }}Service.Update(formatUpdateData(request))
	fmt.Println("TODO: Handle response on your way", response, err)
	return &gen.UpdateResponse{
	}, err
}

func formatUpdateData(request *gen.UpdateRequest) map[string]interface{}{

	// TODO: Format your own data
	return map[string]interface{}{

	}
}

// Delete Deletes an object
func (service *serviceImpl) Delete(
	ctx context.Context, request *gen.DeleteRequest) (*gen.DeleteResponse, error) {

	response, err := {{ .ServiceName }}Service.Delete(formatDeleteData(request))
	fmt.Println("TODO: Handle response on your way", response, err)
	return &gen.DeleteResponse{
	}, err
}

func formatDeleteData(request *gen.DeleteRequest) map[string]interface{}{

	// TODO: Format your own data
	return map[string]interface{}{

	}
}

// RegisterGRPCEndpoint callback to register {{ .ServiceName }} grpc endpoint
func RegisterGRPCEndpoint(grpcServer *grpc.Server) {
	gen.Register{{ .UpperServiceName }}Server(grpcServer, &serviceImpl{})
}


// RegisterHTTPEndpoint callback to register {{ .ServiceName }} http endpoint
func RegisterHTTPEndpoint(ctx context.Context, mux *runtime.ServeMux,
	endpoint string, opts []grpc.DialOption) (err error) {

	return gen.Register{{ .UpperServiceName }}HandlerFromEndpoint(
		ctx, mux, endpoint, opts)
}