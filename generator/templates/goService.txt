package {{ .ServiceName }}Service

import (
	"fmt"

	gen "github.com/reivaj05/apigateway/services/{{ .ServiceName }}/generated"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

var serviceAddress string
var client gen.{{ .UpperServiceName }}Client

func init() {
	serviceAddress = "YOUR_SERVICE_ADDRESS"	
}


// Get client service implementation
func Get(data map[string]interface{}) (*gen.GetResponse, error) {
	fmt.Println("TODO: Implement get in {{ .ServiceName }} service")
	conn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	client = gen.New{{ .UpperServiceName }}Client(conn)
	return client.Get(context.TODO(), &gen.GetRequest{})
}

// List client service implementation
func List(data map[string]interface{}) (*gen.ListResponse, error) {
	fmt.Println("TODO: Implement list in {{ .ServiceName }} service")
	conn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	client = gen.New{{ .UpperServiceName }}Client(conn)
	return client.List(context.TODO(), &gen.ListRequest{})
}

// Create client service implementation
func Create(data map[string]interface{}) (*gen.CreateResponse, error) {
	fmt.Println("TODO: Implement create in {{ .ServiceName }} service")
	conn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	client = gen.New{{ .UpperServiceName }}Client(conn)
	return client.Create(context.TODO(), &gen.CreateRequest{})
}

// Update client service implementation
func Update(data map[string]interface{}) (*gen.UpdateResponse, error) {
	fmt.Println("TODO: Implement update in {{ .ServiceName }} service")
	conn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	client = gen.New{{ .UpperServiceName }}Client(conn)
	return client.Update(context.TODO(), &gen.UpdateRequest{})
}

// Delete client service implementation
func Delete(data map[string]interface{}) (*gen.DeleteResponse, error) {
	fmt.Println("TODO: Implement delete in {{ .ServiceName }} service")
	conn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	client = gen.New{{ .UpperServiceName }}Client(conn)
	return client.Delete(context.TODO(), &gen.DeleteRequest{})
}

